// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const SUPABASE_URL = 'https://xwtcasfvetisjaiijtsj.supabase.co';
const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh3dGNhc2Z2ZXRpc2phaWlqdHNqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgyMTA5OTMsImV4cCI6MjA3Mzc4Njk5M30.b8ScpPxBx6K0HmWynqppBLSxxuENNmOJR7Kcl6hIo2s';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let allHeroes = [];
let shownHeroes = new Set();
let currentHeroes = [];
let gameCompleted = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', async function() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
    await initializeGame();
    await loadNewBattle();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
async function initializeGame() {
    try {
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –≥–µ—Ä–æ–µ–≤ –∏–∑ Supabase...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤ –∏–∑ –±–∞–∑—ã
        const response = await fetch(`${SUPABASE_URL}/rest/v1/heroes?select=*`, {
            method: 'GET',
            headers: {
                'apikey': SUPABASE_KEY,
                'Authorization': `Bearer ${SUPABASE_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status, response.statusText);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:', errorText);
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–µ—Ä–æ–µ–≤: ${response.status} ${response.statusText}`);
        }
        
        allHeroes = await response.json();
        console.log('–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≥–µ—Ä–æ–µ–≤:', allHeroes.length);
        console.log('–ü–µ—Ä–≤—ã–µ 3 –≥–µ—Ä–æ—è:', allHeroes.slice(0, 3));
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ localStorage
        const savedProgress = localStorage.getItem('heroVoteProgress');
        if (savedProgress) {
            try {
                const progress = JSON.parse(savedProgress);
                shownHeroes = new Set(progress.shownHeroes || []);
                console.log('–ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å:', shownHeroes.size, '–ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤');
            } catch (e) {
                console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', e);
                shownHeroes = new Set();
            }
        }
        
        updateProgressBar();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showResult('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
        setTimeout(() => {
            location.reload();
        }, 3000);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–π –±–∏—Ç–≤—ã
async function loadNewBattle() {
    if (gameCompleted) {
        showCompletionMessage();
        return;
    }
    
    try {
        // –í—ã–±–∏—Ä–∞–µ–º –¥–≤—É—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–µ–ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤
        const availableHeroes = allHeroes.filter(hero => !shownHeroes.has(hero.id));
        
        console.log('–î–æ—Å—Ç—É–ø–Ω–æ –≥–µ—Ä–æ–µ–≤:', availableHeroes.length);
        
        if (availableHeroes.length < 2) {
            gameCompleted = true;
            showCompletionMessage();
            return;
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º –¥–≤—É—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤
        const randomIndices = getRandomIndices(availableHeroes.length, 2);
        currentHeroes = [
            availableHeroes[randomIndices[0]],
            availableHeroes[randomIndices[1]]
        ];
        
        console.log('–¢–µ–∫—É—â–∞—è –±–∏—Ç–≤–∞:', currentHeroes[0].name, 'vs', currentHeroes[1].name);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–µ—Ä–æ–µ–≤
        displayHero(1, currentHeroes[0]);
        displayHero(2, currentHeroes[1]);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ
        shownHeroes.add(currentHeroes[0].id);
        shownHeroes.add(currentHeroes[1].id);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        saveProgress();
        updateProgressBar();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏—Ç–≤—ã:', error);
        showResult('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏—Ç–≤—ã', 'error');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–µ—Ä–æ—è –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ
function displayHero(cardNumber, hero) {
    const card = document.getElementById(`hero${cardNumber}`);
    const img = document.getElementById(`hero${cardNumber}-img`);
    const name = document.getElementById(`hero${cardNumber}-name`);
    const rating = document.getElementById(`hero${cardNumber}-rating`);
    const publisher = document.getElementById(`hero${cardNumber}-publisher`);
    
    console.log(`–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–µ—Ä–æ—è ${cardNumber}:`, hero);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
    img.onerror = function() {
        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${hero.image_url}`);
        this.src = 'https://via.placeholder.com/320x220/2a2a4a/ffffff?text=Image+Error';
    };
    
    img.onload = function() {
        console.log(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${hero.image_url}`);
    };
    
    img.src = hero.image_url;
    img.alt = hero.name;
    
    name.textContent = hero.name;
    rating.textContent = `–†–µ–π—Ç–∏–Ω–≥: ${hero.rating || 0}`;
    publisher.textContent = hero.publisher;
    
    // –¶–≤–µ—Ç —Ä–∞–º–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–∑–¥–∞—Ç–µ–ª—è
    const borderColor = getPublisherColor(hero.publisher);
    card.style.borderColor = borderColor;
}

// –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
async function vote(winnerNumber) {
    if (gameCompleted) return;
    
    const winnerIndex = winnerNumber - 1;
    const loserIndex = winnerNumber === 1 ? 1 : 0;
    
    const winner = currentHeroes[winnerIndex];
    const loser = currentHeroes[loserIndex];
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É
        showResult(`${winner.name} –ø–æ–±–µ–∂–¥–∞–µ—Ç!`, 'success');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
        updateHeroStats(winner.id, { wins: 1, viewers: 1 }).catch(console.error);
        updateHeroStats(loser.id, { loses: 1, viewers: 1 }).catch(console.error);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –±–∏—Ç–≤–æ–π
        setTimeout(() => {
            loadNewBattle();
        }, 1500);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', error);
        showResult('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞', 'error');
        
        // –í—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
        setTimeout(() => {
            loadNewBattle();
        }, 1500);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ—è
async function updateHeroStats(heroId, updates) {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const response = await fetch(`${SUPABASE_URL}/rest/v1/heroes?id=eq.${heroId}`, {
            method: 'PATCH',
            headers: {
                'apikey': SUPABASE_KEY,
                'Authorization': `Bearer ${SUPABASE_KEY}`,
                'Content-Type': 'application/json',
                'Prefer': 'return=minimal'
            },
            body: JSON.stringify(updates)
        });
        
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${response.status}`);
        }
        
        console.log(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ—Ä–æ—è ${heroId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        throw error;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getRandomIndices(max, count) {
    const indices = new Set();
    while (indices.size < count) {
        indices.add(Math.floor(Math.random() * max));
    }
    return Array.from(indices);
}

function getPublisherColor(publisher) {
    const colors = {
        'DC': '#4cc9f0',
        'Marvel': '#ed1d24',
        'Valiant': '#ff6b00',
        'Rebellion': '#8b0000',
        'Dark Horse': '#333333'
    };
    return colors[publisher] || '#4cc9f0';
}

function showResult(message, type) {
    const resultElement = document.getElementById('result');
    resultElement.textContent = message;
    resultElement.className = `result ${type}`;
    resultElement.classList.add('show');
    
    setTimeout(() => {
        resultElement.classList.remove('show');
    }, 2000);
}

function showCompletionMessage() {
    const resultElement = document.getElementById('result');
    resultElement.innerHTML = 'üéâ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤!<br>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!';
    resultElement.className = 'result success show';
}

function saveProgress() {
    const progress = {
        shownHeroes: Array.from(shownHeroes),
        timestamp: new Date().toISOString()
    };
    localStorage.setItem('heroVoteProgress', JSON.stringify(progress));
}

function updateProgressBar() {
    const progressFill = document.getElementById('progress-fill');
    const progressText = document.getElementById('progress-text');
    
    if (allHeroes.length > 0) {
        const progress = (shownHeroes.size / allHeroes.length) * 100;
        progressFill.style.width = `${progress}%`;
        progressText.textContent = `${shownHeroes.size}/${allHeroes.length}`;
    } else {
        progressFill.style.width = '0%';
        progressText.textContent = '0/0';
    }
}

// –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function testConnection() {
    try {
        const response = await fetch(`${SUPABASE_URL}/rest/v1/heroes?select=count`, {
            headers: {
                'apikey': SUPABASE_KEY,
                'Authorization': `Bearer ${SUPABASE_KEY}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ—Ä–æ–µ–≤:', data[0].count);
            return true;
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', response.status);
            return false;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
        return false;
    }
}

// –ó–∞–ø—É—Å—Ç–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
testConnection();