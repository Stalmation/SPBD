// app.js
import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm";

const SUPABASE_URL = "https://xwtcasfvetisjaiijtsj.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh3dGNhc2Z2ZXRpc2phaWlqdHNqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgyMTA5OTMsImV4cCI6MjA3Mzc4Njk5M30.b8ScpPxBx6K0HmWynqppBLSxxuENNmOJR7Kcl6hIo2s";

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

// Global variables
let allHeroes = [];
let currentHeroes = [];
let nextHeroes = [];
let votedHeroes = new Set();
let tg = null;
let isVotingInProgress = false;
let currentVotePairId = null;

// Game variables
let playerLives = 5;
let playerScore = 0;
let maxScore = 0;
let gameActive = true;

// Publisher logo mapping
const PUBLISHER_LOGOS = {
    'dc': 'https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Owner/dc.webp',
    'marvel': 'https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Owner/marvel.webp',
    'valiant': 'https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Owner/valiant.webp',
    'rebellion': 'https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Owner/rebellion.webp',
    'dark horse': 'https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Owner/dark_horse.webp',
    'dark_horse': 'https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Owner/dark_horse.webp'
};

// Initialize Telegram Web App
function initTelegram() {
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        tg = Telegram.WebApp;
        tg.expand();
        tg.enableClosingConfirmation();
        tg.setHeaderColor('#1a1a2e');
        tg.setBackgroundColor('#1a1a2e');
        tg.BackButton.hide();
        
        tg.onEvent('viewportChanged', (data) => {
            if (data && data.isStateStable && !data.isExpanded) {
                tg.close();
            }
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–∏–±—Ä–∞—Ü–∏–∏
        if (tg.HapticFeedback) {
            console.log("HapticFeedback supported");
            // –¢–µ—Å—Ç–æ–≤–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (–æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∞—è)
            setTimeout(() => {
                try {
                    tg.HapticFeedback.impactOccurred('light');
                } catch (e) {
                    console.log("HapticFeedback error:", e);
                }
            }, 1000);
        } else {
            console.log("HapticFeedback NOT supported");
        }

        
    } else {
        console.log("Running in browser (not Telegram)");
        setupBrowserExit();
    }
}

function setupBrowserExit() {
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            if (confirm('Exit the game?')) {
                window.history.back();
            }
        }
    });
}

// Load progress
function loadProgress() {
    try {
        const savedProgress = localStorage.getItem('heroVoteProgress');
        const savedStats = localStorage.getItem('heroGameStats');
        
        if (savedProgress) {
            const parsedProgress = JSON.parse(savedProgress);
            if (Array.isArray(parsedProgress)) {
                votedHeroes = new Set(parsedProgress);
            }
        }
        
        if (savedStats) {
            const stats = JSON.parse(savedStats);
            playerLives = stats.lives || 5;
            playerScore = stats.score || 0;
            maxScore = stats.maxScore || 0;
        }
        
        updateUI();
    } catch (error) {
        console.error("Error loading progress:", error);
        votedHeroes = new Set();
        playerLives = 5;
        playerScore = 0;
    }
}

// Save progress
function saveProgress() {
    try {
        localStorage.setItem('heroVoteProgress', JSON.stringify(Array.from(votedHeroes)));
        localStorage.setItem('heroGameStats', JSON.stringify({
            lives: playerLives,
            score: playerScore,
            maxScore: Math.max(maxScore, playerScore)
        }));
        updateUI();
    } catch (error) {
        console.error("Error saving progress:", error);
    }
}

// Update UI
function updateUI() {
    const scoreElement = document.getElementById('player-score');
    const maxScoreElement = document.getElementById('max-score');
    
    if (scoreElement) scoreElement.textContent = playerScore;
    if (maxScoreElement) maxScoreElement.textContent = maxScore;
    
    updateLivesDisplay();
}

function updateLivesDisplay() {
    const globalLives = document.getElementById('global-lives');
    
    if (globalLives) {
        globalLives.innerHTML = '';
        
        for (let i = 0; i < playerLives; i++) {
            const star = document.createElement('div');
            star.className = 'life-star';
            globalLives.appendChild(star);
        }
    }
}

// Get publisher logo URL
function getPublisherLogoUrl(publisherName) {
    if (!publisherName) return null;
    
    const lowerName = publisherName.toLowerCase().trim();
    return PUBLISHER_LOGOS[lowerName] || null;
}

// Load all heroes
async function loadAllHeroes() {
    try {
        let { data, error } = await supabase
            .from("Heroes_Table")
            .select("id, name, image_url, wins, loses, viewers, rating, good_bad, publisher")
            .order('rating', { ascending: false });

        if (error) throw error;
        if (!data || data.length === 0) return;

        allHeroes = data.map(hero => ({
            ...hero,
            logo_url: getPublisherLogoUrl(hero.publisher)
        }));
        
        loadProgress();
        startGame();
        
    } catch (error) {
        console.error("Error loading heroes:", error);
    }
}

// Start game
function startGame() {
    gameActive = true;
    displayHeroes();
    updateUI();
}

// Get random heroes
function getRandomHeroes() {
    if (allHeroes.length < 2) return null;
    
    const availableHeroes = allHeroes.filter(hero => !votedHeroes.has(hero.id));
    
    if (availableHeroes.length < 2) {
        showCompletionScreen();
        return null;
    }
    
    const randomIndex1 = Math.floor(Math.random() * availableHeroes.length);
    let randomIndex2;
    do {
        randomIndex2 = Math.floor(Math.random() * availableHeroes.length);
    } while (randomIndex1 === randomIndex2);
    
    return [availableHeroes[randomIndex1], availableHeroes[randomIndex2]];
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Play Again" –≤ Completion Screen
function showCompletionScreen() {
    gameActive = false;
    maxScore = Math.max(maxScore, playerScore);
    saveProgress();
    
    document.body.style.opacity = '0.7';
    
    setTimeout(() => {
        const popup = document.createElement('div');
        popup.className = 'game-over-popup';
        popup.innerHTML = `
            <div class="popup-content">
                <h2>üéâ CONGRATULATIONS!</h2>
                <p>You've rated all ${allHeroes.length} heroes!</p>
                <p>Your final score: <span class="score">${playerScore}</span></p>
                <p>Best score: <span class="best">${maxScore}</span></p>
                <button id="complete-restart-button">üîÑ Play Again</button>
            </div>
        `;
        
        document.body.appendChild(popup);
        
        document.getElementById('complete-restart-button').addEventListener('click', function() {
            popup.remove();
            resetGame(); // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        });
    }, 1000);
    playHaptic('win');
}

// Preload next pair
function preloadNextPair() {
    const nextPair = getRandomHeroes();
    if (!nextPair) return;
    nextHeroes = nextPair;
    nextPair.forEach(hero => {
        if (hero.image_url) new Image().src = hero.image_url;
        if (hero.logo_url) new Image().src = hero.logo_url;
    });
}

// Hide all overlays - –¢–ï–ü–ï–†–¨ –°–ö–†–´–í–ê–ï–¢ –¢–û–õ–¨–ö–û –ü–†–ò –°–ú–ï–ù–ï –ü–ê–†–´
function hideAllOverlays() {
    const overlays = document.querySelectorAll('.hero-result-overlay');
    const starContainers = document.querySelectorAll('.star-rating-container');
    
    overlays.forEach(overlay => {
        overlay.classList.remove('show', 'win', 'lose');
        const percentElement = overlay.querySelector('.result-rating-percent');
        if (percentElement) percentElement.textContent = '';
        const sprite = overlay.querySelector('.result-sprite');
        if (sprite) sprite.style.backgroundImage = '';
    });
    
    starContainers.forEach(container => {
        container.classList.remove('show');
        const percentElement = container.querySelector('.star-rating-percent');
        if (percentElement) {
            percentElement.textContent = '';
            percentElement.innerHTML = '';
        }
    });
    
    const smokeEffects = document.querySelectorAll('.smoke-effect');
    smokeEffects.forEach(smoke => smoke.classList.remove('show'));
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é showVoteResult - –£–ë–ò–†–ê–ï–ú —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
function showVoteResult(heroNumber, userWon, selectedRating, otherRating) {
    const selectedHero = heroNumber;
    const otherHero = heroNumber === 1 ? 2 : 1;
    
    const selectedResult = document.getElementById(`hero${selectedHero}-result`);
    const otherResult = document.getElementById(`hero${otherHero}-result`);
    
    if (userWon) {
        showResultImage(selectedResult, 'win'); // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        showResultImage(otherResult, 'lose');   // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
        showStarRating(selectedHero, selectedRating, true);
        showStarRating(otherHero, otherRating, false);
    } else {
        showResultImage(selectedResult, 'lose'); // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        showResultImage(otherResult, 'win');     // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
        showStarRating(selectedHero, selectedRating, false);
        showStarRating(otherHero, otherRating, true);
    }
}


// Function to show result image with percentage - –ë–ï–ó –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –°–ö–†–´–¢–ò–Ø
function showResultImage(element, type) {
    if (!element) return;
    
    const sprite = element.querySelector('.result-sprite');
    const percentElement = element.querySelector('.result-rating-percent');
    
    if (!sprite) return;
    
    // Set the image
    if (type === 'win') {
        sprite.style.backgroundImage = "url('https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Images/Win.webp')";
    } else {
        sprite.style.backgroundImage = "url('https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Images/Lose.webp')";
    }
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    if (percentElement) {
        percentElement.textContent = '';
    }
    
    // Show the overlay with animation
    element.className = `hero-result-overlay show ${type}`;
}

// Get hero alignment
function getHeroAlignment(goodBad) {
    switch(goodBad) {
        case 1: return { 
            imageUrl: 'https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Images/hero.webp',
            alt: 'HERO'
        };
        case 2: return { 
            imageUrl: 'https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Images/evil.webp',
            alt: 'EVIL'
        };
        case 3: return { 
            imageUrl: 'https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Images/anti_hero.webp',
            alt: 'ANTI HERO'
        };
        default: return { 
            imageUrl: null,
            alt: 'UNKNOWN'
        };
    }
}

// Display heroes - –¢–ï–ü–ï–†–¨ –°–ö–†–´–í–ê–ï–¢ –ü–†–ï–î–´–î–£–©–ò–ï –û–í–ï–†–õ–ï–ò –ü–ï–†–ï–î –ü–û–ö–ê–ó–û–ú –ù–û–í–´–•
function displayHeroes() {
    if (!gameActive) return;
    
    isVotingInProgress = false;
    currentVotePairId = null;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–∞—Ä—ã –ü–ï–†–ï–î –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤—ã—Ö –≥–µ—Ä–æ–µ–≤
    hideAllOverlays();
    
    if (nextHeroes.length === 2) {
        currentHeroes = nextHeroes;
        nextHeroes = [];
    } else {
        currentHeroes = getRandomHeroes();
    }
    
    if (!currentHeroes) return;
    
    preloadNextPair();
    
    currentHeroes.forEach((hero, index) => {
        const heroNum = index + 1;
        const imgElement = document.getElementById(`hero${heroNum}-img`);
        const nameElement = document.getElementById(`hero${heroNum}-name`);
        const publisherElement = document.getElementById(`hero${heroNum}-publisher`);
        const alignmentElement = document.getElementById(`hero${heroNum}-alignment`);
        
        // Set hero image
        imgElement.src = hero.image_url;
        
        // Set hero name with auto-sizing
        nameElement.textContent = hero.name;
        if (hero.name.length > 12) {
            nameElement.style.fontSize = '6px';
        } else if (hero.name.length > 8) {
            nameElement.style.fontSize = '7px';
        } else {
            nameElement.style.fontSize = '8px';
        }
        
        // Set alignment
        const alignment = getHeroAlignment(hero.good_bad);
        alignmentElement.innerHTML = '';
        if (alignment.imageUrl) {
            const alignmentImg = document.createElement('img');
            alignmentImg.src = alignment.imageUrl;
            alignmentImg.alt = alignment.alt;
            alignmentImg.className = 'alignment-image';
            alignmentImg.loading = 'lazy';
            alignmentElement.appendChild(alignmentImg);
        } else {
            alignmentElement.textContent = alignment.alt;
        }
        
        // Set publisher logo
        publisherElement.innerHTML = '';
        if (hero.logo_url) {
            const logoImg = document.createElement('img');
            logoImg.src = hero.logo_url;
            logoImg.alt = hero.publisher || 'Publisher';
            logoImg.className = 'publisher-logo';
            logoImg.loading = 'lazy';
            publisherElement.appendChild(logoImg);
        }
    });
}

// Vote function - –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –ó–ê–î–ï–†–ñ–ö–£ –î–û –°–ú–ï–ù–´ –ü–ê–†–´
async function vote(heroNumber) {
    if (!gameActive || !currentHeroes || currentHeroes.length < 2 || 
        playerLives <= 0 || isVotingInProgress) {
        return;
    }
    
    isVotingInProgress = true;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—ã–±–æ—Ä–∞
    indicateSelection(heroNumber);
    
    const selectedHero = currentHeroes[heroNumber - 1];
    const otherHero = currentHeroes[heroNumber === 1 ? 1 : 0];
    
    const votePairId = `${selectedHero.id}-${otherHero.id}`;
    
    if (currentVotePairId === votePairId) {
        isVotingInProgress = false;
        return;
    }
    
    currentVotePairId = votePairId;
    
    const userMadeRightChoice = selectedHero.rating > otherHero.rating;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É
    if (userMadeRightChoice) {
        playSmokeAnimation(`hero${heroNumber}-blue-smoke`, "https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Sprites/BlueSMoke256.webp");
        playSmokeAnimation(`hero${heroNumber === 1 ? 2 : 1}-gray-smoke`, "https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Sprites/RedSmoke256.webp");
    } else {
        playSmokeAnimation(`hero${heroNumber}-gray-smoke`, "https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Sprites/RedSmoke256.webp");
        playSmokeAnimation(`hero${heroNumber === 1 ? 2 : 1}-blue-smoke`, "https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Sprites/BlueSMoke256.webp");
    }
    
    showVoteResult(heroNumber, userMadeRightChoice, selectedHero.rating, otherHero.rating);
    
    // –ó–ê–î–ï–†–ñ–ö–ê –ø–µ—Ä–µ–¥ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –æ—á–∫–æ–≤/–∂–∏–∑–Ω–µ–π
    setTimeout(() => {
        // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏/–∂–∏–∑–Ω–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
        if (userMadeRightChoice) {
            playerScore++;
            if (tg) tg.HapticFeedback.impactOccurred('heavy');
        } else {
            playerLives--;
            if (tg) tg.HapticFeedback.impactOccurred('medium');
        }
        
        updateUI(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        
        votedHeroes.add(selectedHero.id);
        votedHeroes.add(otherHero.id);
        saveProgress();
        
        updateHeroStatsAsync(selectedHero.id, otherHero.id);
    }, 2500); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1.5 —Å–µ–∫—É–Ω–¥—ã
    
    // –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –ó–ê–î–ï–†–ñ–ö–£ –¥–æ 3 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–º–µ–Ω–æ–π –ø–∞—Ä—ã
    setTimeout(() => {
        isVotingInProgress = false;
        currentVotePairId = null;
        
        if (playerLives <= 0) {
            gameOver();
        } else if (gameActive) {
            displayHeroes();
        }
    }, 2500); // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 3000 –º—Å

    // –í–∏–±—Ä–æ–æ—Ç–¥–∞—á–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
    playHaptic('selection');
    
    if (userMadeRightChoice) {
        playHaptic('correct');
    } else {
        playHaptic('wrong');
    }
}



// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∑–≤–µ–∑–¥—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø
function showStarRating(heroNumber, rating, isWinner) {
    const starContainer = document.getElementById(`hero${heroNumber}-star-rating`);
    const starImage = starContainer.querySelector('.rating-star');
    const percentElement = starContainer.querySelector('.star-rating-percent');
    
    if (!starContainer || !starImage || !percentElement) return;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∑–≤–µ–∑–¥—ã
    starImage.src = isWinner 
        ? 'https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Images/StarBlue.webp'
        : 'https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Images/StarRed.webp';
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ü–∏—Ñ—Ä—ã
    percentElement.innerHTML = '';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Å –∑–∞–ø—è—Ç–æ–π –∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫ %
    const ratingText = `${rating.toFixed(1)}%`.replace('.', ',');
    
    // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è —Ü–∏—Ñ—Ä
    convertToImageBasedDigits(percentElement, ratingText);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—É
    starContainer.classList.add('show');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 2.5 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        starContainer.classList.remove('show');
    }, 2500);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä –∏–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
function convertToImageBasedDigits(element, text) {
    for (let i = 0; i < text.length; i++) {
        const char = text[i];
        if (char === ',') {
            const commaSpan = document.createElement('span');
            commaSpan.className = 'digit comma';
            commaSpan.style.backgroundImage = `url('https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Images/Numbers/comma.webp')`;
            element.appendChild(commaSpan);
        } else if (char === '%') {
            const percentSpan = document.createElement('span');
            percentSpan.className = 'digit percent';
            percentSpan.style.backgroundImage = `url('https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Images/Numbers/percent.webp')`;
            element.appendChild(percentSpan);
        } else if (!isNaN(char) && char !== ' ') {
            const digitSpan = document.createElement('span');
            digitSpan.className = 'digit';
            digitSpan.style.backgroundImage = `url('https://xwtcasfvetisjaiijtsj.supabase.co/storage/v1/object/public/Heroes/Images/Numbers/${char}.webp')`;
            element.appendChild(digitSpan);
        }
    }
}



// Async stats update
async function updateHeroStatsAsync(winnerId, loserId) {
    try {
        const { data: winnerData, error: winnerFetchError } = await supabase
            .from('Heroes_Table')
            .select('wins, viewers')
            .eq('id', winnerId)
            .single();
            
        const { data: loserData, error: loserFetchError } = await supabase
            .from('Heroes_Table')
            .select('loses, viewers')
            .eq('id', loserId)
            .single();
        
        if (winnerFetchError || loserFetchError) {
            console.error("Fetch error:", winnerFetchError || loserFetchError);
            return;
        }
        
        const { error: winnerError } = await supabase
            .from('Heroes_Table')
            .update({ 
                wins: (winnerData.wins || 0) + 1,
                viewers: (winnerData.viewers || 0) + 1
            })
            .eq('id', winnerId);
        
        if (winnerError) console.error("Winner update error:", winnerError);
        
        const { error: loserError } = await supabase
            .from('Heroes_Table')
            .update({ 
                loses: (loserData.loses || 0) + 1,
                viewers: (loserData.viewers || 0) + 1
            })
            .eq('id', loserId);
        
        if (loserError) console.error("Loser update error:", loserError);
            
    } catch (error) {
        console.error("Stats update error:", error);
    }
}

// Smoke animation - FIXED with acceleration
function playSmokeAnimation(elementId, spriteUrl) {
    const el = document.getElementById(elementId);
    if (!el) return;
    
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏
    el.style.backgroundImage = 'none';
    el.style.opacity = '0';
    el.style.transform = 'translate(-50%, -50%) scale(0.65)';
    el.style.overflow = 'hidden'; // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –æ–±—Ä–µ–∑–∫—É
    
    setTimeout(() => {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø—Ä–∞–π—Ç
        el.style.backgroundImage = `url(${spriteUrl})`;
        el.style.backgroundSize = '1280px 1280px';
        el.style.backgroundRepeat = 'no-repeat';
        el.style.backgroundPosition = '0px 0px';
        el.style.opacity = '1';
        el.style.overflow = 'hidden'; // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –æ–±—Ä–µ–∑–∫—É
        el.classList.add("show");
        
        let frame = 0;
        const frameSize = 256;
        const framesPerRow = 5;
        const totalFrames = 25;
        
        // –†–∞–∑–¥–µ–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
        const slowFrames = 10; // –ü–µ—Ä–≤—ã–µ 15 –∫–∞–¥—Ä–æ–≤ - –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        const fastFrames = 15; // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–∞–¥—Ä–æ–≤ - —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–µ
        
        let currentInterval = 60; // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–º–µ–¥–ª–µ–Ω–Ω–æ)
        
        function animateFrame() {
            if (frame >= totalFrames) {
                // –ü–ª–∞–≤–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                setTimeout(() => {
                    el.classList.remove("show");
                    el.style.opacity = '0';
                    setTimeout(() => {
                        el.style.backgroundImage = 'none';
                    }, 200);
                }, 150);
                return;
            }
            
            // –†–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–¥—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–µ–∑–∫–æ–π
            const col = frame % framesPerRow;
            const row = Math.floor(frame / framesPerRow);
            
            const x = -col * frameSize;
            const y = -row * frameSize;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é - –≤–∞–∂–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –º–æ—Ä–≥–∞–Ω–∏—è
            el.style.backgroundPosition = `${x}px ${y}px`;
            
            // –ü–ª–∞–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ
            if (frame < 2) {
                const scale = 0.65 + (frame * 0.02);
                el.style.transform = `translate(-50%, -50%) scale(${scale})`;
            }
            // –ü–ª–∞–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ
            if (frame > 1) {
                const scale = 1 
                el.style.transform = `translate(-50%, -50%) scale(${scale})`;
            }
            
            frame++;
            
            // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ - –ü–õ–ê–í–ù–û–ï –£–°–ö–û–†–ï–ù–ò–ï
            if (frame === slowFrames) {
                // –†–µ–∑–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –±—ã—Å—Ç—Ä—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
                currentInterval = 30;
            } else if (frame > slowFrames && frame < totalFrames - 2) {
                // –ü–ª–∞–≤–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ
                currentInterval = Math.max(20, 30 - (frame - slowFrames) * 2);
            }
            
            setTimeout(animateFrame, currentInterval);
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        animateFrame();
        
    }, 30);
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function indicateSelection(heroNumber) {
    const container = document.querySelector(`#hero${heroNumber}`).closest('.hero-complete-container');
    if (!container) return;
    
    container.classList.add('selected');
    
    setTimeout(() => {
        container.classList.remove('selected');
    }, 300);
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏–±—Ä–∞—Ü–∏–∏
function playHaptic(type) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Telegram –≤–∏–±—Ä–∞—Ü–∏—é
    if (tg && tg.HapticFeedback) {
        try {
            switch(type) {
                case 'selection': 
                    tg.HapticFeedback.impactOccurred('light');
                    break;
                case 'correct':
                    tg.HapticFeedback.impactOccurred('heavy');
                    break;
                case 'wrong':
                    tg.HapticFeedback.impactOccurred('medium');
                    break;
                case 'game_over':
                    tg.HapticFeedback.notificationOccurred('error');
                    break;
                case 'win':
                    tg.HapticFeedback.notificationOccurred('success');
                    break;
            }
            return; // –ï—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –≤—ã—Ö–æ–¥–∏–º
        } catch (e) {
            console.log("Telegram haptic failed");
        }
    }
    
    // Fallback: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ)
    if (navigator.vibrate) {
        switch(type) {
            case 'selection': navigator.vibrate(30); break;     // –ö–æ—Ä–æ—Ç–∫–∏–π —â–µ–ª—á–æ–∫
            case 'correct': navigator.vibrate(80); break;       // –î–ª–∏–Ω–Ω—ã–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π
            case 'wrong': navigator.vibrate(150); break;        // –î–ª–∏–Ω–Ω—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π
            case 'game_over': navigator.vibrate([100, 50, 100]); break; // –ü–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–∏–≥—Ä—ã—à–∞
            case 'win': navigator.vibrate([50, 30, 50, 30, 50]); break; // –ü–∞—Ç—Ç–µ—Ä–Ω –ø–æ–±–µ–¥—ã
        }
    }
}

// Game over function
function gameOver() {
    gameActive = false;
    maxScore = Math.max(maxScore, playerScore);
    saveProgress();
    
    document.body.style.opacity = '0.7';
    playHaptic('game_over');
    setTimeout(() => {
        showGameOverPopup();
    }, 1000);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Try Again" –≤ Game Over
function showGameOverPopup() {
    gameActive = false;
    maxScore = Math.max(maxScore, playerScore);
    saveProgress();
    
    document.body.style.opacity = '0.7';
    
    setTimeout(() => {
        const popup = document.createElement('div');
        popup.className = 'game-over-popup';
        popup.innerHTML = `
            <div class="popup-content">
                <h2>üíÄ GAME OVER!</h2>
                <p>Your score: <span class="score">${playerScore}</span></p>
                <p>Best score: <span class="best">${maxScore}</span></p>
                <button id="restart-button">üîÑ Try Again</button>
            </div>
        `;
        
        document.body.appendChild(popup);
        
        document.getElementById('restart-button').addEventListener('click', function() {
            popup.remove();
            resetGame(); // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        });
    }, 1000);
    
    if (tg) tg.HapticFeedback.notificationOccurred('error');
}

// Reset game
// Reset game - –ü–û–õ–ù–´–ô –°–ë–†–û–° –ü–†–û–ì–†–ï–°–°–ê
function resetGame() {
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    playerLives = 5;
    playerScore = 0;
    votedHeroes.clear();
    isVotingInProgress = false;
    currentVotePairId = null;
    gameActive = true;
    
    // –û—á–∏—â–∞–µ–º localStorage
    localStorage.removeItem('heroVoteProgress');
    localStorage.removeItem('heroGameStats');
    
    document.body.style.opacity = '1';
    updateUI();
    displayHeroes();
}

// DOM loaded
document.addEventListener("DOMContentLoaded", function() {
    initTelegram();
    loadAllHeroes();
    
    // Hide unnecessary elements
    const elementsToHide = [
        'header h1',
        'header p',
        '.progress-container',
        '.rating-notice',
        'footer'
    ];
    
    elementsToHide.forEach(selector => {
        const element = document.querySelector(selector);
        if (element) element.style.display = 'none';
    });
});

// Escape handler - –î–û–ë–ê–í–õ–Ø–ï–ú –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–£ –ü–û F5
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        if (confirm('Exit the game?')) {
            if (tg && tg.close) {
                tg.close();
            } else {
                window.history.back();
            }
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É F5 –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø–æ–ª–Ω—ã–º —Å–±—Ä–æ—Å–æ–º (–±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
    if (e.key === 'F5' || (e.ctrlKey && e.key === 'r')) {
        e.preventDefault();
        resetGame(); // –°—Ä–∞–∑—É —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    }
});

// DOM loaded
document.addEventListener("DOMContentLoaded", function() {
    initTelegram();
    // –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Telegram
    if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
        resetGame();
    }
    loadAllHeroes();
    
    // Hide unnecessary elements
    const elementsToHide = [
        'header h1',
        'header p',
        '.progress-container',
        '.rating-notice',
        'footer'
    ];
    if (e.key === 'Escape') {
        if (confirm('Exit the game?')) {
            if (tg && tg.close) {
                tg.close();
            } else {
                window.history.back();
            }
        }
    }
    elementsToHide.forEach(selector => {
        const element = document.querySelector(selector);
        if (element) element.style.display = 'none';
    });
});



window.vote = vote;