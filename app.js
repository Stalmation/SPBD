// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const SUPABASE_URL = 'https://xwtcasfvetisjaiijtsj.supabase.co';
const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh3dGNhc2Z2ZXRpc2phaWlqdHNqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgyMTA5OTMsImV4cCI6MjA3Mzc4Njk5M30.b8ScpPxBx6K0HmWynqppBLSxxuENNmOJR7Kcl6hIo2s';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let allHeroes = [];
let shownHeroes = new Set();
let currentHeroes = [];
let gameCompleted = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', async function() {
    await initializeGame();
    await loadNewBattle();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
async function initializeGame() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤ –∏–∑ –±–∞–∑—ã
        const response = await fetch(`${SUPABASE_URL}/rest/v1/heroes?select=*`, {
            headers: {
                'apikey': SUPABASE_KEY,
                'Authorization': `Bearer ${SUPABASE_KEY}`
            }
        });
        
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–µ—Ä–æ–µ–≤');
        
        allHeroes = await response.json();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ localStorage
        const savedProgress = localStorage.getItem('heroVoteProgress');
        if (savedProgress) {
            const progress = JSON.parse(savedProgress);
            shownHeroes = new Set(progress.shownHeroes || []);
            updateProgressBar();
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showResult('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–π –±–∏—Ç–≤—ã
async function loadNewBattle() {
    if (gameCompleted) {
        showCompletionMessage();
        return;
    }
    
    try {
        // –í—ã–±–∏—Ä–∞–µ–º –¥–≤—É—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–µ–ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤
        const availableHeroes = allHeroes.filter(hero => !shownHeroes.has(hero.id));
        
        if (availableHeroes.length < 2) {
            gameCompleted = true;
            showCompletionMessage();
            return;
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º –¥–≤—É—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤
        const randomIndices = getRandomIndices(availableHeroes.length, 2);
        currentHeroes = [
            availableHeroes[randomIndices[0]],
            availableHeroes[randomIndices[1]]
        ];
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–µ—Ä–æ–µ–≤
        displayHero(1, currentHeroes[0]);
        displayHero(2, currentHeroes[1]);
        
        // –û—Ç–º–µ—á–∞–µ–º –ø–æ–∫–∞–∑ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await trackHeroShow(currentHeroes[0].id);
        await trackHeroShow(currentHeroes[1].id);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ
        shownHeroes.add(currentHeroes[0].id);
        shownHeroes.add(currentHeroes[1].id);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        saveProgress();
        updateProgressBar();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏—Ç–≤—ã:', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–µ—Ä–æ—è –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ
function displayHero(cardNumber, hero) {
    const card = document.getElementById(`hero${cardNumber}`);
    const img = document.getElementById(`hero${cardNumber}-img`);
    const name = document.getElementById(`hero${cardNumber}-name`);
    const rating = document.getElementById(`hero${cardNumber}-rating`);
    const publisher = document.getElementById(`hero${cardNumber}-publisher`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
    img.onerror = function() {
        this.src = 'https://via.placeholder.com/320x220/2a2a4a/ffffff?text=Image+Not+Found';
    };
    img.src = hero.image_url;
    
    name.textContent = hero.name;
    rating.textContent = `–†–µ–π—Ç–∏–Ω–≥: ${hero.rating || 0}`;
    publisher.textContent = hero.publisher;
    
    // –¶–≤–µ—Ç —Ä–∞–º–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–∑–¥–∞—Ç–µ–ª—è
    const borderColor = getPublisherColor(hero.publisher);
    card.style.borderColor = borderColor;
}

// –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
async function vote(winnerNumber) {
    if (gameCompleted) return;
    
    const winnerIndex = winnerNumber - 1;
    const loserIndex = winnerNumber === 1 ? 1 : 0;
    
    const winner = currentHeroes[winnerIndex];
    const loser = currentHeroes[loserIndex];
    
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await sendVote(winner.id, loser.id);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        showResult(`${winner.name} –ø–æ–±–µ–∂–¥–∞–µ—Ç!`, 'success');
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –±–∏—Ç–≤–æ–π
        setTimeout(() => {
            loadNewBattle();
        }, 1500);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', error);
        showResult('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞', 'error');
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–∞
async function sendVote(winnerId, loserId) {
    await Promise.all([
        updateHeroStats(winnerId, { wins: { increment: 1 }, viewers: { increment: 1 } }),
        updateHeroStats(loserId, { loses: { increment: 1 }, viewers: { increment: 1 } })
    ]);
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞ –≥–µ—Ä–æ—è
async function trackHeroShow(heroId) {
    await updateHeroStats(heroId, { shows: { increment: 1 } });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ—è
async function updateHeroStats(heroId, updates) {
    try {
        await fetch(`${SUPABASE_URL}/rest/v1/heroes?id=eq.${heroId}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
                'apikey': SUPABASE_KEY,
                'Authorization': `Bearer ${SUPABASE_KEY}`
            },
            body: JSON.stringify(updates)
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getRandomIndices(max, count) {
    const indices = new Set();
    while (indices.size < count) {
        indices.add(Math.floor(Math.random() * max));
    }
    return Array.from(indices);
}

function getPublisherColor(publisher) {
    const colors = {
        'DC': '#4cc9f0',
        'Marvel': '#ed1d24',
        'Valiant': '#ff6b00',
        'Rebellion': '#8b0000',
        'Dark Horse': '#333333'
    };
    return colors[publisher] || '#4cc9f0';
}

function showResult(message, type) {
    const resultElement = document.getElementById('result');
    resultElement.textContent = message;
    resultElement.className = `result ${type}`;
    resultElement.classList.add('show');
    
    setTimeout(() => {
        resultElement.classList.remove('show');
    }, 2000);
}

function showCompletionMessage() {
    const resultElement = document.getElementById('result');
    resultElement.innerHTML = 'üéâ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤!<br>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!';
    resultElement.className = 'result success show';
}

function saveProgress() {
    const progress = {
        shownHeroes: Array.from(shownHeroes),
        timestamp: new Date().toISOString()
    };
    localStorage.setItem('heroVoteProgress', JSON.stringify(progress));
}

function updateProgressBar() {
    const progressFill = document.getElementById('progress-fill');
    const progressText = document.getElementById('progress-text');
    
    const progress = (shownHeroes.size / allHeroes.length) * 100;
    progressFill.style.width = `${progress}%`;
    progressText.textContent = `${shownHeroes.size}/${allHeroes.length}`;
}

